#pragma once

#include <windows.h>
#include <winioctl.h>
#include <stdio.h>
#include <iostream>
#include <ntstatus.h>
#include <winternl.h>
#include <Psapi.h>
#include <string.h>
#include <stddef.h>
#include <map>
#include <vector>
#include <tlhelp32.h>


typedef ULONGLONG QWORD;
typedef QWORD* PQWORD;

// other
#define CACHE_SPRAY_SIZE 3000
#define IOCTL(Function) CTL_CODE(FILE_DEVICE_UNKNOWN, Function, METHOD_NEITHER, FILE_ANY_ACCESS)
#define SystemExtendedProcessInformation 57
#define SystemHandleInformation 0x10
#define SystemHandleInformationSize 1024 * 1024 * 2
#define SE_DEBUG_PRIVILEGE (20L)
#define ObjectThreadType 0x08

typedef NTSTATUS(WINAPI* _NtQueryObject)(
    HANDLE Handle,
    int ObjectInformationClass,
    PVOID ObjectInformation,
    ULONG ObjectInformationLength,
    PULONG ReturnLength
);

typedef NTSTATUS(WINAPI* _NtQuerySystemInformation)(
    ULONG SystemInformationClass,
    PVOID SystemInformation,
    ULONG SystemInformationLength,
    PULONG ReturnLength
);

typedef NTSTATUS(WINAPI* NtQueryIntervalProfile_t)(
    IN ULONG ProfileSource, 
    OUT PULONG Interval
);

typedef VOID(NTAPI* my_RtlInitUnicodeString) (
    PUNICODE_STRING DestinationString,
    PCWSTR SourceString
    );

typedef BOOLEAN(WINAPI* my_RtlEqualUnicodeString)(
    PCUNICODE_STRING String1,
    PCUNICODE_STRING String2,
    BOOLEAN          CaseInSensitive
    );


typedef NTSTATUS(NTAPI* my_NtCreateSymbolicLinkObject)(
    OUT PHANDLE             pHandle,
    IN ACCESS_MASK          DesiredAccess,
    IN POBJECT_ATTRIBUTES   ObjectAttributes,
    IN PUNICODE_STRING      DestinationName
    );


typedef NTSTATUS(NTAPI* my_NtCreateDirectoryObject)(
    OUT PHANDLE             DirectoryHandle,
    IN ACCESS_MASK          DesiredAccess,
    IN POBJECT_ATTRIBUTES   ObjectAttributes
    );


typedef struct _VM_COUNTERS
{
    SIZE_T		   PeakVirtualSize;
    SIZE_T         PageFaultCount;
    SIZE_T         PeakWorkingSetSize;
    SIZE_T         WorkingSetSize;
    SIZE_T         QuotaPeakPagedPoolUsage;
    SIZE_T         QuotaPagedPoolUsage;
    SIZE_T         QuotaPeakNonPagedPoolUsage;
    SIZE_T         QuotaNonPagedPoolUsage;
    SIZE_T         PagefileUsage;
    SIZE_T         PeakPagefileUsage;
    SIZE_T         VirtualSize;		
} VM_COUNTERS;

typedef enum _KWAIT_REASON
{
    Executive = 0,
    FreePage = 1,
    PageIn = 2,
    PoolAllocation = 3,
    DelayExecution = 4,
    Suspended = 5,
    UserRequest = 6,
    WrExecutive = 7,
    WrFreePage = 8,
    WrPageIn = 9,
    WrPoolAllocation = 10,
    WrDelayExecution = 11,
    WrSuspended = 12,
    WrUserRequest = 13,
    WrEventPair = 14,
    WrQueue = 15,
    WrLpcReceive = 16,
    WrLpcReply = 17,
    WrVirtualMemory = 18,
    WrPageOut = 19,
    WrRendezvous = 20,
    Spare2 = 21,
    Spare3 = 22,
    Spare4 = 23,
    Spare5 = 24,
    WrCalloutStack = 25,
    WrKernel = 26,
    WrResource = 27,
    WrPushLock = 28,
    WrMutex = 29,
    WrQuantumEnd = 30,
    WrDispatchInt = 31,
    WrPreempted = 32,
    WrYieldExecution = 33,
    WrFastMutex = 34,
    WrGuardedMutex = 35,
    WrRundown = 36,
    MaximumWaitReason = 37
} KWAIT_REASON;

typedef struct _SYSTEM_EXTENDED_THREAD_INFORMATION
{
    SYSTEM_THREAD_INFORMATION ThreadInfo;
    PVOID StackBase;
    PVOID StackLimit;
    PVOID Win32StartAddress;
    PVOID TebAddress; /* This is only filled in on Vista and above */
    ULONG Reserved1;
    ULONG Reserved2;
    ULONG Reserved3;
} SYSTEM_EXTENDED_THREAD_INFORMATION, * PSYSTEM_EXTENDED_THREAD_INFORMATION;

typedef struct _SYSTEM_EXTENDED_PROCESS_INFORMATION
{
    ULONG NextEntryOffset;
    ULONG NumberOfThreads;
    LARGE_INTEGER SpareLi1;
    LARGE_INTEGER SpareLi2;
    LARGE_INTEGER SpareLi3;
    LARGE_INTEGER CreateTime;
    LARGE_INTEGER UserTime;
    LARGE_INTEGER KernelTime;
    UNICODE_STRING ImageName;
    KPRIORITY BasePriority;
    ULONG ProcessId;
    ULONG InheritedFromUniqueProcessId;
    ULONG HandleCount;
    ULONG SessionId;
    PVOID PageDirectoryBase;
    VM_COUNTERS VirtualMemoryCounters;
    SIZE_T PrivatePageCount;
    IO_COUNTERS IoCounters;
    SYSTEM_EXTENDED_THREAD_INFORMATION Threads[1];
} SYSTEM_EXTENDED_PROCESS_INFORMATION, * PSYSTEM_EXTENDED_PROCESS_INFORMATION;


typedef struct StackInfo {
    PVOID Base;
    PVOID Limit;
} StackInfo;


using fNtQuerySystemInformation = NTSTATUS(WINAPI*)(
    ULONG SystemInformationClass,
    PVOID SystemInformation,
    ULONG SystemInformationLength,
    PULONG ReturnLength
    );

typedef struct _SYSTEM_HANDLE_TABLE_ENTRY_INFO
{
    USHORT UniqueProcessId;
    USHORT CreatorBackTraceIndex;
    UCHAR ObjectTypeIndex;
    UCHAR HandleAttributes;
    USHORT HandleValue;
    PVOID Object;
    ULONG GrantedAccess;
} SYSTEM_HANDLE_TABLE_ENTRY_INFO, * PSYSTEM_HANDLE_TABLE_ENTRY_INFO;

typedef struct _SYSTEM_HANDLE_INFORMATION
{
    ULONG NumberOfHandles;
    SYSTEM_HANDLE_TABLE_ENTRY_INFO Handles[1];
} SYSTEM_HANDLE_INFORMATION, * PSYSTEM_HANDLE_INFORMATION;

typedef NTSTATUS(NTAPI* _NtQueryIntervalProfile)(
    DWORD ProfileSource,
    PULONG Interval
);

typedef NTSTATUS(WINAPI* _NtWriteVirtualMemory)(
    _In_ HANDLE ProcessHandle,
    _In_ PVOID BaseAddress,
    _In_ PVOID Buffer,
    _In_ ULONG NumberOfBytesToWrite,
    _Out_opt_ PULONG NumberOfBytesWritten
    );

typedef NTSTATUS(*WINAPI ZwAllocateVirtualMemory)(
    _In_    HANDLE    ProcessHandle,
    _Inout_ PVOID* BaseAddress,
    _In_    ULONG_PTR ZeroBits,
    _Inout_ PSIZE_T   RegionSize,
    _In_    ULONG     AllocationType,
    _In_    ULONG     Protect
);


typedef struct _SEP_TOKEN_PRIVILEGES
{
    /* 0x0000 */ unsigned __int64 Present;
    /* 0x0008 */ unsigned __int64 Enabled;
    /* 0x0010 */ unsigned __int64 EnabledByDefault;
} SEP_TOKEN_PRIVILEGES, * PSEP_TOKEN_PRIVILEGES; /* size: 0x0018 */

typedef struct _SEP_AUDIT_POLICY
{
    /* 0x0000 */ struct _TOKEN_AUDIT_POLICY AdtTokenPolicy;
    /* 0x001e */ unsigned char PolicySetStatus;
} SEP_AUDIT_POLICY, * PSEP_AUDIT_POLICY; /* size: 0x001f */

typedef struct _TOKEN
{
    /* 0x0000 */ struct _TOKEN_SOURCE TokenSource;
    /* 0x0010 */ struct _LUID TokenId;
    /* 0x0018 */ struct _LUID AuthenticationId;
    /* 0x0020 */ struct _LUID ParentTokenId;
    /* 0x0028 */ union _LARGE_INTEGER ExpirationTime;
    /* 0x0030 */ struct _ERESOURCE* TokenLock;
    /* 0x0038 */ struct _LUID ModifiedId;
    /* 0x0040 */ struct _SEP_TOKEN_PRIVILEGES Privileges;
    /* 0x0058 */ struct _SEP_AUDIT_POLICY AuditPolicy;
    /* 0x0078 */ unsigned long SessionId;
    /* 0x007c */ unsigned long UserAndGroupCount;
    /* 0x0080 */ unsigned long RestrictedSidCount;
    /* 0x0084 */ unsigned long VariableLength;
    /* 0x0088 */ unsigned long DynamicCharged;
    /* 0x008c */ unsigned long DynamicAvailable;
    /* 0x0090 */ unsigned long DefaultOwnerIndex;
    /* 0x0098 */ struct SID_AND_ATTRIBUTES* UserAndGroups;
    /* 0x00a0 */ struct SID_AND_ATTRIBUTES* RestrictedSids;
    /* 0x00a8 */ void* PrimaryGroup;
    /* 0x00b0 */ unsigned long* DynamicPart;
    /* 0x00b8 */ struct _ACL* DefaultDacl;
    /* 0x00c0 */ enum _TOKEN_TYPE TokenType;
    /* 0x00c4 */ enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    /* 0x00c8 */ unsigned long TokenFlags;
    /* 0x00cc */ unsigned char TokenInUse;
    /* 0x00d0 */ unsigned long IntegrityLevelIndex;
    /* 0x00d4 */ unsigned long MandatoryPolicy;
    /* 0x00d8 */ struct _SEP_LOGON_SESSION_REFERENCES* LogonSession;
    /* 0x00e0 */ struct _LUID OriginatingLogonSession;
    /* 0x00e8 */ struct _SID_AND_ATTRIBUTES_HASH SidHash;
    /* 0x01f8 */ struct _SID_AND_ATTRIBUTES_HASH RestrictedSidHash;
    /* 0x0308 */ struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION* pSecurityAttributes;
    /* 0x0310 */ void* Package;
    /* 0x0318 */ struct _SID_AND_ATTRIBUTES* Capabilities;
    /* 0x0320 */ unsigned long CapabilityCount;
    /* 0x0328 */ struct _SID_AND_ATTRIBUTES_HASH CapabilitiesHash;
    /* 0x0438 */ struct _SEP_LOWBOX_NUMBER_ENTRY* LowboxNumberEntry;
    /* 0x0440 */ struct _SEP_CACHED_HANDLES_ENTRY* LowboxHandlesEntry;
    /* 0x0448 */ struct _AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION* pClaimAttributes;
    /* 0x0450 */ void* TrustLevelSid;
    /* 0x0458 */ struct _TOKEN* TrustLinkedToken;
    /* 0x0460 */ void* IntegrityLevelSidValue;
    /* 0x0468 */ struct _SEP_SID_VALUES_BLOCK* TokenSidValues;
    /* 0x0470 */ struct _SEP_LUID_TO_INDEX_MAP_ENTRY* IndexEntry;
    /* 0x0478 */ struct _SEP_TOKEN_DIAG_TRACK_ENTRY* DiagnosticInfo;
    /* 0x0480 */ struct _SEP_CACHED_HANDLES_ENTRY* BnoIsolationHandlesEntry;
    /* 0x0488 */ void* SessionObject;
    /* 0x0490 */ unsigned __int64 VariablePart;
} TOKEN, * PTOKEN; /* size: 0x0498 */

typedef struct _PROCESS_HANDLE_TABLE_ENTRY_INFO
{
    HANDLE HandleValue;
    ULONGLONG HandleCount;
    ULONGLONG PointerCount;
    ACCESS_MASK GrantedAccess;
    ULONG ObjectTypeIndex;
    ULONG HandleAttributes;
    ULONG Reserved;
} PROCESS_HANDLE_TABLE_ENTRY_INFO, * PPROCESS_HANDLE_TABLE_ENTRY_INFO;

typedef struct _PROCESS_HANDLE_SNAPSHOT_INFORMATION
{
    ULONGLONG NumberOfHandles;
    ULONGLONG Reserved;
    PROCESS_HANDLE_TABLE_ENTRY_INFO Handles[1];
} PROCESS_HANDLE_SNAPSHOT_INFORMATION, * PPROCESS_HANDLE_SNAPSHOT_INFORMATION;


typedef struct _OBJECT_TYPE_INFORMATION
{
    UNICODE_STRING TypeName;
    ULONG TotalNumberOfObjects;
    ULONG TotalNumberOfHandles;
    ULONG TotalPagedPoolUsage;
    ULONG TotalNonPagedPoolUsage;
    ULONG TotalNamePoolUsage;
    ULONG TotalHandleTableUsage;
    ULONG HighWaterNumberOfObjects;
    ULONG HighWaterNumberOfHandles;
    ULONG HighWaterPagedPoolUsage;
    ULONG HighWaterNonPagedPoolUsage;
    ULONG HighWaterNamePoolUsage;
    ULONG HighWaterHandleTableUsage;
    ULONG InvalidAttributes;
    GENERIC_MAPPING GenericMapping;
    ULONG ValidAccessMask;
    BOOLEAN SecurityRequired;
    BOOLEAN MaintainHandleCount;
    BOOLEAN TypeIndex;
    CHAR ReservedByte;
    ULONG PoolType;
    ULONG DefaultPagedPoolCharge;
    ULONG DefaultNonPagedPoolCharge;
} OBJECT_TYPE_INFORMATION, * POBJECT_TYPE_INFORMATION;

// getPteAddress uses selfref to get the PTE address of a virtual address
uintptr_t getPteAddress(PVOID addr, PVOID base);

// sprayTLBCache makes sure that after flipping PTE U/S we do not run into caching issues
// Reference: https://kristal-g.github.io/
void sprayTLBCache();

// getBaseAddr gives the base address of a loaded kernel module e.g. ntoskrnl.exe
ULONGLONG getBaseAddr(LPCWSTR drvname);

// getDriverDataSection
DWORD getDriverDataSection(const char* path);

// leakStackBase
StackInfo leakStackBase(const char* path);

// _EPROCESS from PID
QWORD getSystemEProcess();

// get handle to a specific service
HRESULT GetServiceHandle(_In_ LPCWSTR ServiceName, _Out_ PHANDLE ProcessHandle);

// GetTokenObjectIndex ...
HRESULT GetTokenObjectIndex(_Out_ PULONG TokenIndex);

// GetProcessTokenAddress ...
HRESULT GetProcessTokenAddress(_In_ HANDLE tokenHandle, _Out_ PVOID* HandleAddress);

// GetKThread
PVOID GetkThread();

// FindProcessId
DWORD FindProcessId(const std::wstring& processName);